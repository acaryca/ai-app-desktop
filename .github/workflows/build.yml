name: Build Electron App

on:
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write
  packages: read

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
      - name: Update Release with Processing Message
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          body: |
            ### Files are being generated...
            
            Please wait while installers are being prepared for all platforms.
          draft: false
          prerelease: ${{ github.event.release.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: update-release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Get version from package.json
      id: version
      shell: bash
      run: |
        # Extract the version from the git tag (remove 'v' prefix)
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from tag: $VERSION"
        else
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER="${{ github.run_number }}"
          VERSION_TAG="$VERSION-$BUILD_NUMBER"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Using version from package.json: $VERSION"
        fi

    - name: Install dependencies
      run: npm ci

    - name: Generate icons
      run: npm run convert-icon

    - name: Generate ICNS for macOS
      if: runner.os == 'macOS'
      run: |
        mkdir -p assets/icon.iconset
        for size in 16 32 64 128 256 512; do
          cp assets/icon-$size.png assets/icon.iconset/icon_${size}x${size}.png
        done
        for size in 32 64 128 256 512; do
          cp assets/icon-$((size*2)).png assets/icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns assets/icon.iconset -o assets/icon.icns
        rm -rf assets/icon.iconset

    - name: Patch dmg-builder for macOS
      if: runner.os == 'macOS'
      run: |
        DMG_BUILDER_PATH="node_modules/dmg-builder/out/dmg.js"
        if [ -f "$DMG_BUILDER_PATH" ]; then
          sed -i '' 's/const args = \["create"/const args = \["create", "-fs", "HFS+", "-fsargs", "-c c=64,a=16,e=16"/' "$DMG_BUILDER_PATH"
          sed -i '' '/if (process.arch === "arm64") {/,/}/d' "$DMG_BUILDER_PATH"
          echo "Patched dmg-builder to force HFS+ filesystem via code"
        else
          echo "dmg-builder file not found at $DMG_BUILDER_PATH"
        fi

    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for Windows
      if: runner.os == 'Windows'
      run: npm run package:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for Linux
      if: runner.os == 'Linux'
      run: npm run package:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for macOS
      if: runner.os == 'macOS'
      run: npm run package:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List dist directory content
      shell: bash
      run: ls -la dist/

    - name: Upload Windows artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-windows
        path: |
          dist/*.exe
          dist/*.exe.blockmap
          dist/latest.yml
        retention-days: 1

    - name: Upload Linux artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-linux
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.yml
        retention-days: 1

    - name: Upload macOS artifacts
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-macos
        path: |
          dist/*.dmg
          dist/*.zip
          dist/*.blockmap
          dist/*.yml
        retention-days: 1
        
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Get version from package.json
        id: version
        shell: bash
        run: |
          # Get version from the release event
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from release tag: $VERSION"
          
      - name: Get commit history since last release
        id: commit_history
        shell: bash
        run: |
          # Fetch all tags to ensure we have the complete history
          git fetch --tags --force
          
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # If no previous tag exists or can't be found
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, getting all commits"
            COMMIT_HISTORY=$(git log --pretty=format:"- %s (%h)" -n 50 | cat)
          else
            echo "Found previous tag: $LAST_TAG"
            # Get commits since last tag to current tag
            CURRENT_TAG="${{ github.event.release.tag_name }}"
            echo "Current tag: $CURRENT_TAG"
            COMMIT_HISTORY=$(git log --pretty=format:"- %s (%h)" "$LAST_TAG..$CURRENT_TAG" | cat)
            
            # If no commits found between tags, get recent commits
            if [ -z "$COMMIT_HISTORY" ]; then
              echo "No commits found between tags, getting recent commits"
              COMMIT_HISTORY=$(git log --pretty=format:"- %s (%h)" -n 20 | cat)
            fi
          fi
          
          echo "COMMIT_HISTORY<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_HISTORY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          # Copier les fichiers d'installation
          find all-artifacts -type f \( -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.zip" \) | xargs -I{} cp {} release-files/
          
          # Copier les fichiers de mise à jour
          find all-artifacts -type f \( -name "*.yml" -o -name "*.blockmap" \) | xargs -I{} cp {} release-files/
          
          # Lister tous les fichiers préparés pour la release
          echo "Files prepared for release:"
          ls -la release-files/
          
      - name: Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          body: |
            ### Build Information
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Date: ${{ github.event.release.created_at }}
            
            ### Changes
            ${{ steps.commit_history.outputs.COMMIT_HISTORY }}
            
            ### Installation
            Choose the appropriate installer for your operating system:
            - Windows: `.exe` installer
            - macOS: `.dmg` and `.zip` archives
            - Linux: `.AppImage`, `.deb`, and `.rpm` packages
            
            ### Support
            For support or to report issues, please visit our GitHub repository.
          files: release-files/*
          draft: false
          prerelease: ${{ github.event.release.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}