name: Build Electron App

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Get version from package.json
      id: version
      shell: pwsh
      run: |
        $packageJson = Get-Content -Path package.json -Raw | ConvertFrom-Json
        $version = $packageJson.version
        $buildNumber = "${{ github.run_number }}"
        $versionTag = "$version-$buildNumber"
        if ("${{ runner.os }}" -eq "Windows") {
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "VERSION_TAG=$versionTag" >> $env:GITHUB_OUTPUT
        } else {
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$versionTag" >> $GITHUB_OUTPUT
        }

    - name: Install dependencies
      run: npm ci

    - name: Generate icons
      run: npm run convert-icon

    - name: Generate ICNS for macOS
      if: runner.os == 'macOS'
      run: |
        mkdir -p assets/icon.iconset
        for size in 16 32 64 128 256 512; do
          cp assets/icon-$size.png assets/icon.iconset/icon_${size}x${size}.png
        done
        for size in 32 64 128 256 512; do
          cp assets/icon-$((size*2)).png assets/icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns assets/icon.iconset -o assets/icon.icns
        rm -rf assets/icon.iconset

    - name: Patch dmg-builder for macOS
      if: runner.os == 'macOS'
      run: |
        DMG_BUILDER_PATH="node_modules/dmg-builder/out/dmg.js"
        if [ -f "$DMG_BUILDER_PATH" ]; then
          sed -i '' 's/const args = \["create"/const args = \["create", "-fs", "HFS+", "-fsargs", "-c c=64,a=16,e=16"/' "$DMG_BUILDER_PATH"
          sed -i '' '/if (process.arch === "arm64") {/,/}/d' "$DMG_BUILDER_PATH"
          echo "Patched dmg-builder to force HFS+ filesystem via code"
        else
          echo "dmg-builder file not found at $DMG_BUILDER_PATH"
        fi

    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for Windows
      if: runner.os == 'Windows'
      run: npm run package:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for Linux
      if: runner.os == 'Linux'
      run: npm run package:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package for macOS
      if: runner.os == 'macOS'
      run: npm run package:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-windows-${{ steps.version.outputs.VERSION_TAG }}
        path: dist/*.exe
        retention-days: 1

    - name: Upload Linux artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-linux-${{ steps.version.outputs.VERSION_TAG }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        retention-days: 1

    - name: Upload macOS artifacts
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ai-win-app-macos-${{ steps.version.outputs.VERSION_TAG }}
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 1
        
  release:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get version from package.json
        id: version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER="${{ github.run_number }}"
          VERSION_TAG="$VERSION-$BUILD_NUMBER"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find all-artifacts -type f \( -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.zip" \) | xargs -I{} cp {} release-files/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION_TAG }}
          name: ACARY AI App - Release ${{ steps.version.outputs.VERSION_TAG }}
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete artifacts
        if: always()
        run: |
          rm -rf all-artifacts release-files 